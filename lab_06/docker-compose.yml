version: '3.2'
services:
  user_manager:
    tty: true
    container_name: user_manager
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - JWT_KEY=0123456789ABCDEF0123456789ABCDEF
      - DB_HOST=user_base
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=product_base
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
      - CACHE=cache_db:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    depends_on:
      pg_db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - my-network

  product_manager:
    tty: true
    container_name: product_manager
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - JWT_KEY=0123456789ABCDEF0123456789ABCDEF
      - DB_HOST=user_base
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=product_base
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
      - CACHE=cache_db:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    depends_on:
      mongo_db:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - my-network

  my_writer:
    build:
      context: .
      dockerfile: Dockerfile-writer
    container_name: my_writer
    environment:
      - JWT_KEY=0123456789ABCDEF0123456789ABCDEF
      - DB_HOST=user_base
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=product_base
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
      - CACHE=cache_db:6379
      - QUEUE_HOST=kafka1:9092
      - QUEUE_TOPIC=event_server
      - QUEUE_GROUP_ID=0
    networks:
      - my-network
    depends_on:
      - kafka1

  pg_db:
    container_name: user_base
    image: postgres:15
    environment:
      - POSTGRES_USER=stud
      - POSTGRES_PASSWORD=stud
      - PGDATA=/data/postgres
      - POSTGRES_DB=archdb
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d archdb -U stud"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  mongo_db:
    image: mongo:5.0
    container_name: product_base
    restart: on-failure
    volumes:
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 35s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  cache_db:
    container_name: cache_db
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - my-network
    volumes: 
      - cache_db:/data

  kafka1:
    image: 'bitnami/kafka:latest'
    container_name: kafka1
    ports:
    #   - "2181:2181"
        - "9092:9092"
    #   - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
    volumes:
      - kafka_volume1:/bitnami/kafka
    networks:
      - my-network
    
  kafka2:
    image: 'bitnami/kafka:latest'
    container_name: kafka2
    # ports:
    #   - "2181:2181"
    #   - "9092:9092"
    #   - "9093:9093"
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
      KAFKA_BROKER_ID: 2
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka1:9093,2@kafka2:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_KRAFT_CLUSTER_ID: "dh6khitPSDGZSBOjNeTC_g"
    volumes:
      - kafka_volume2:/bitnami/kafka
    networks:
      - my-network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.4.0
    ports:
      - "8888:8080"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092"
      KAFKA_CLUSTERS_0_NAME: "kraft"
    networks:
      - my-network

volumes:
  cache_db:
  kafka_volume1:
  kafka_volume2:

networks:
  my-network:
    driver: "bridge"
    external: false