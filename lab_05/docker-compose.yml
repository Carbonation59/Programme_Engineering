version: '3.2'
services:
  user_manager:
    tty: true
    container_name: user_manager
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - JWT_KEY=0123456789ABCDEF0123456789ABCDEF
      - DB_HOST=user_base
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=product_base
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
      - CACHE=cache_db:6379
    depends_on:
      pg_db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - my-network

  product_manager:
    tty: true
    container_name: product_manager
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - JWT_KEY=0123456789ABCDEF0123456789ABCDEF
      - DB_HOST=user_base
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=product_base
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
      - CACHE=cache_db:6379
    depends_on:
      pg_db:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - my-network

  pg_db:
    container_name: user_base
    image: postgres:15
    environment:
      - POSTGRES_USER=stud
      - POSTGRES_PASSWORD=stud
      - PGDATA=/data/postgres
      - POSTGRES_DB=archdb
    volumes:
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d archdb -U stud"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  mongo_db:
    image: mongo:5.0
    container_name: product_base
    restart: on-failure
    volumes:
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 35s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  cache_db:
    container_name: cache_db
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - my-network
    volumes: 
      - cache_db:/data

volumes:
  cache_db:

networks:
  my-network:
    driver: "bridge"
    external: false